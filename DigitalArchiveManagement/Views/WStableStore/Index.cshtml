
@{
    ViewData["Title"] = "资源总库";
}


@section head {
    <link href="~/lib/bootstrap-table/css/bootstrap-table.css" rel="stylesheet" />
    <link href="~/css/table-checkbox.css" rel="stylesheet" />
    <link href="~/css/arch-button.css" rel="stylesheet" />
}

@section body {
    <div class="container-fluid">
        <div id="archCrudToolbar">
            @*<div class="btn-group">*@

            <div class="btn-group">
                <button type="button" class="btn btn-archbutton" style="border-color:#99D1FF;" onclick="primSearch();"><i class="fa fa-search"></i> 基本搜索</button>
                <button type="button" class="btn btn-archbutton dropdown-toggle" data-toggle="dropdown" style="border-color:#99D1FF;" aria-haspopup="true" aria-expanded="false">
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu">
                    <li><a href="#" onclick="highLevelSearch();"><i class="fa fa-search"></i> 高级搜索</a></li>
                </ul>
            </div>
            <div class="btn-group">
                <button type="button" class="btn btn-archbutton" style="border-color:#99D1FF;" onclick="toManageStore();"><i class="fa fa-mail-reply"></i> 返回预归档库</button>
                <button type="button" class="btn btn-archbutton dropdown-toggle" data-toggle="dropdown" style="border-color:#99D1FF;" aria-haspopup="true" aria-expanded="false">
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu">
                    <li><a href="#" onclick="allToManageStore();"><i class="fa fa-mail-reply-all"></i> 全部返回预归档库</a></li>
                </ul>
            </div>
            <button id="exportBtn" type="button" class="btn btn-archbutton" style="border-color:#99D1FF;" onclick="exportData();"><i class="glyphicon glyphicon-list-alt"></i> 导出数据</button>
            <button type="button" class="btn btn-archbutton" style="border-color:#99D1FF;" onclick="virStock();"><i class="glyphicon glyphicon-list-alt"></i> 虚拟库房</button>
            @*</div>*@
        </div>

        <div class="specified-table">
            <table id="stableStoregrid"></table>
        </div>

    </div>
    <script>
        var whereConditon = '';//基本搜索、高级搜索和本页初始加载 的搜索条件记录在此
        var sqlParams = null;//whereConditon对应的sqlparameter[]
        var searchMode = 0;//0 表示初始检索，1表示基本检索，2表示高级检索

        $(function () {
            var fstr =  "@Html.Raw(@ViewData["colFields"])";
            if ($.trim(fstr) == '') {
                $("#h_loading_mask").css("display", "none");//加载成功后关闭加载提示
                $("#h_loading").css("display", "none");
                HM.alertWin('此档案类型库还未进行显示配置，请配置后继续！');
                return;
            }
            loadTable();
        });

        var loadTable = function(){
            var url = '/WStableStore/ShowInitialSearchRecs';
            loadTableData(url, null);//初始加载数据
        }

        var loadTableData = function (url,paramlist) {
            $('#stableStoregrid').bootstrapTable('destroy');
            $table = $('#stableStoregrid').bootstrapTable({
                url: url,
                method: 'POST',                      //请求方式（*）
                contentType: "application/x-www-form-urlencoded",
                silent: true, //静态刷新
                toolbar: '#archCrudToolbar',              //工具按钮用哪个容器
                striped: true,                      //是否显示行间隔色
                cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                pagination: true,                   //是否显示分页（*）
                sortable: true,                     //是否启用排序
                sortOrder: "asc",                   //排序方式
                sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
                pageNumber: 1,                      //初始化加载第一页，默认第一页,并记录
                pageSize: 15,                     //每页的记录行数（*）
                pageList: [15, 30, 50, 100],        //可供选择的每页的行数（*）
                search: false,                      //是否显示表格搜索
                strictSearch: true,
                showColumns: true,                  //是否显示所有的列（选择显示的列）
                showRefresh: true,                  //是否显示刷新按钮
                minimumCountColumns: 2,             //最少允许的列数
                clickToSelect: true,                //是否启用点击选中行
                //height: 500,                      //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
                uniqueId: "Unique_code",                     //每一行的唯一标识，一般为主键列
                showToggle: true,                   //是否显示详细视图和列表视图的切换按钮
                showExport: true,
                cardView: false,                    //是否显示详细视图
                detailView: false,                  //是否显示父子表
                paginationLoop: false,
                showLoading: false,
                singleSelect: false,                //true只能单选，false为多选
                exportDataType: "selected",        //导出checkbox选中的行数
                showFullscreen: true,
                useRowAttrFunc: true,
                reorderableRows: true,
                //得到查询的参数
                queryParams: function (params) {
                    //这里的键的名字和控制器的变量名必须一致，这边改动，控制器也需要改成一样的
                    var temp = {
                        pageSize: params.limit,                         //页面大小
                        pageIndex: params.offset / params.limit,   //页码
                        tableName: '@ViewData["table"]',
                        fieldsStr: '@ViewData["fieldStr"]',
                        pList: paramlist//从搜索条件窗口传过来的动态参数，对应后台的List<>
                    };
                    return temp;
                },
                columns: [
                    {
                        field: 'check', checkbox: true, formatter: function (value, row, index) {
                            if (row.check == true) {
                                return { checked: true };//设置选中
                            }
                        }
                    },
                    @Html.Raw(ViewData["colFields"])
                    , { field: 'operate', title: '看原文', align: 'center', width: '50px', events: operateEvents, formatter: 'operateFormatter' }
                ],
                onLoadSuccess: function (data) {
                    whereConditon = data.conditon;//记录返回的查询条件
                    sqlParams = data.pms;//记录查询参数
                    searchMode = data.searchmode;//searchMode = 0 表示初始检索，1表示基本检索，2表示高级检索

                    hideColByLoggedUser();
                    $("#h_loading_mask").css("display", "none");//加载成功后关闭加载提示
                    $("#h_loading").css("display", "none");
                },
                formatLoadingMessage: function () {
                    return "请稍等，正在加载中···";
                },
                onPostBody: function () {
                    //改变复选框样式
                    $('#stableStoregrid').find("input:checkbox").each(function (i) {
                        var $check = $(this);
                        if ($check.attr("id") && $check.next("label")) {
                            return;
                        }
                        var name = $check.attr("name");
                        var id = name + "-" + i;
                        var $label = $('<label for="' + id + '" onclick=stopButtonEvent();></label>');
                        $check.attr("id", id)
                            .parent()
                            .addClass("bella-checkbox")
                            .children("span").remove();
                        $check.parent().append($label);
                    });

                    //动态设置checkbox的那个td的css,不让它触发table的specified-table table td:hover
                    $("#stableStoregrid").find("tr").each(function () {
                        var tdArr = $(this).children();
                        tdArr.eq(0).css("overflow","hidden").css("white-space","nowrap");
                    });
                },
            });
        }

        //当clickToSelect=true时，如果不阻止事件冒泡，则点击自定义CHECKBOX时会没有反应
        function stopButtonEvent() {
            if (window.event) {//IE下阻止冒泡
                event.cancelBubble = true;
            } else {
                event.stopPropagation();
            }
        }

        var primSearch = function () {
            var content = "<iframe id='primSearchFrame' src='/WStableStore/CreateSearchControls/" + '@ViewData["table"]' + "' style='border:0;width:100%;height:100%;'></iframe>";
            HM.dealwinWithId(content, 830, 360, '搜索条件窗口-基本搜索','primSearch');
        }

        var primParamList;
        var searchByCustomCondition = function () {
            var url = '/WStableStore/GetSearchResultByCon';
            loadTableData(url, primParamList);//加载根据条件查询到的数据
            closeDealWin('primSearch');
        }

        var superParamList;
        var superSearchByCustomCondition = function () {
            //alert(JSON.stringify(superParamList));
            var url = '/WStableStore/GetSuperSearchResultByCon';
            loadTableData(url, superParamList);//加载根据条件查询到的数据-高级
            closeDealWin('highLevelSearch');
        }

        var highLevelSearch = function () {
            var content = "<iframe id='superSearchFrame' src='/WStableStore/SuperSearchView/"+ '@ViewData["table"]' +"' style='border:0;width:100%;height:100%;'></iframe>";
            HM.dealwinWithId(content, 980,560,'搜索条件窗口-高级搜索','highLevelSearch');
        }

        var closeDealWin = function (winid) {
            pop.close('deal-win-' + winid);
        }

        var refreshTableData = function () {
            $('#stableStoregrid').bootstrapTable('refresh');
        }

        var toManageStore = function () {
            var sl = $('#stableStoregrid').bootstrapTable('getSelections');
            if (sl.length == 0) {
                HM.alertWin('请至少选择一条记录后再返回预归档库！');
                return;
            }
            var ids = [];
            for (var i = 0; i < sl.length; i++) {
                ids.push(sl[i].unique_code);
            }
            HM.confirmWin(ids, '确认将所选目录返回预归档库吗？', '确认返回预归档库', 'toManage', confirmToManageStore);
        }

        var confirmToManageStore = function (ids) {
             $.ajax({
                type: 'POST',
                url: "/WStableStore/ToManageStore",
                data: { ids: ids, table:'@ViewData["table"]'},
                dataType: "JSON",
                success: function (data) {
                    if (data.rst > 0) {
                        HM.hintWin('所选目录返回预归档库成功！');
                        pop.close('confirm-win_toManage');
                        refreshTableData();
                    }
                }
            });
        }

        var allToManageStore = function () {
            HM.confirmWin('', '确认将所有页的目录返回预归档库吗？', '确认返回预归档库', 'allToManage', confirmAllToManageStore);
        }

        var confirmAllToManageStore = function (id) {
             $.ajax({
                type: 'POST',
                url: "/WStableStore/AllToManageStore",
                data: { table: '@ViewData["table"]', searchmode: searchMode, where: whereConditon, pms: JSON.stringify(sqlParams)},
                dataType: "JSON",
                success: function (data) {
                    if (data.rst > 0) {
                        HM.hintWin('全部返回预归档库成功！');
                        pop.close('confirm-win_allToManage');
                        refreshTableData();
                    }
                }
            });
        }

                //查看原文
        window.operateEvents = {
            'click .RoleOfView': function (e, value, row, index) {
                viewYw(row);
            }
        };

        // 格式化按钮
        function operateFormatter(value, row, index) {
            //console.log('原文'+row.yw);
            if ((row.yw == null || row.yw == 'undefined' || row.yw == '') &&
                (row.yw_xml == null || row.yw_xml == 'undefined' || row.yw_xml == '')) {
                return [
                    '<button type="button" class="RoleOfView btn btn-sm  btn-default" style="margin-right:15px;"><i class="glyphicon glyphicon-file" ></i>&nbsp;原文</button>'
                ].join('');
            }
            else {
                return [
                    '<button type="button" class="RoleOfView btn btn-sm  btn-info" style="margin-right:15px;"><i class="glyphicon glyphicon-file" ></i>&nbsp;原文</button>'
                ].join('');
            }
        }

        function viewYw(row) {
            $.ajax({
                type: 'POST',
                url: "/WPdfView/IfYwExists",
                data: { table: '@ViewData["table"]', userid: '@ViewData["userid"]', uniquecode: row.unique_code },
                dataType: "JSON",
                success: function (data) {
                    if (data.rst == 0) {
                        HM.alertWin(data.info);
                        return;
                    }
                    else {
                        var ulr = '/WPdfView/Index/' + '@ViewData["table"]' + '/' + '@ViewData["userid"]' + '/' + row.unique_code;
                        //var ulr = '/WPdfView/Index1/' + escape(data.ywpath);
                        //top.location.href = ulr;
                        window.open(ulr,'_blank');
                    }
                }
            });
        }

        var hideColByLoggedUser = function() {
            $.ajax({
               type: 'POST',
               url: "/WFunctionAccess/GetFuncAccessByUser",
               data: { userName: '@ViewData["userid"]' },
               dataType: "JSON",
                success: function (data) {
                    //alert(JSON.stringify(data));
                    for (var i = 0; i < data.length; i++) {
                        var func = data[i].func_symble;
                        if (func == 'yw_view') {
                            var vbl = data[i].func_visible;
                            if (vbl == false || vbl.toLowerCase() == 'false') {
                                $('#stableStoregrid').bootstrapTable('hideColumn', 'operate');
                            }
                            //break;
                        }
                        if (func == 'rec_export') {
                            var vbl = data[i].func_visible;
                            if (vbl == false || vbl.toLowerCase() == 'false') {
                                $('#exportBtn').css('display', 'none');
                            }
                        }
                    }
                }
            });
        }

        var exportData = function () {
            HM.confirmWin('', '当前界面中所有页数据都将保存到EXCEL中（一次最多65536条）并下载。\r\n 可通过基本搜索或高级搜索精确查找后，再导出EXCEL。', '确认导出', 'okexport', exportDataExc);
        }

        function exportDataExc() {
            HM.pageLoading();

            var xmlRequest;
            if (window.XMLHttpRequest) {     //   Mozilla   浏览器
                xmlRequest = new XMLHttpRequest();
            } else if (window.ActiveXObject) {   //   IE   浏览器
                try {
                    xmlRequest = new ActiveXObject("Msxml2.XMLHTTP");
                } catch (e) {
                    try {
                        xmlRequest = new ActiveXObject("Microsoft.XMLHTTP");
                    } catch (e) { }
                }
            }

            var form = new FormData();
            form.append('table', '@ViewData["table"]');
            form.append('searchmode', searchMode);
            form.append('where', whereConditon);
            form.append('pms', JSON.stringify(sqlParams));

            xmlRequest.open("POST", "/WStableStore/ExportToExcel", true);
            xmlRequest.responseType = "blob";//必须加，否则后台返回来的excel中是乱码 2020年3月14日
            //xmlRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");//不能加，否则参数传递不到后台

            xmlRequest.onload = function () {
                if ((xmlRequest.status >= 200 && xmlRequest.status < 300) || xmlRequest.status === 304) {
                    var content = xmlRequest.response;
                    //数据转换为文件下载
                    var elink = document.createElement('a');
                    var tm = new Date().Format("yyyy-MM-dd-HH-mm-ss");
                    elink.download = tm + '.xlsx';
                    elink.style.display = 'none';
                    var blob = new Blob([content]);
                    elink.href = URL.createObjectURL(blob);
                    document.body.appendChild(elink);
                    elink.click();
                    document.body.removeChild(elink);
                    HM.closePageLoading();
                    pop.close('confirm-win_okexport');
                }
                if (xmlRequest.status == 500) {//服务器错误
                    HM.alertWin("导出EXCEL文件失败，数据量可能已超过最大限制！如有疑问，可联系系统管理员。");
                    HM.closePageLoading();
                    pop.close('confirm-win_okexport');
                }
            }
            xmlRequest.onabort = function () {
                HM.alertWin("导出EXCEL文件失败，数据量可能已超过最大限制！如有疑问，可联系系统管理员。");
                HM.closePageLoading();
                pop.close('confirm-win_okexport');
            }
            xmlRequest.send(form);
        }

        var downExcelFile = function(){
            //使用jquery的ajax无法实现文件下载，
            //以下方法使用form的submit方法，无刷新 2020年3月14日
            HM.pageLoading();
            var form = $("<form>");//定义一个form表单
            form.attr("style", "display:none");
            form.attr("target", "");
            form.attr("method", "post");
            form.attr("action", "/WManageStore/ExportToExcel");
            var input1 = $("<input>");
            input1.attr("type", "hidden");
            input1.attr("name", "table");
            input1.attr("value", '@ViewData["table"]');
            var input2 = $("<input>");
            input2.attr("type", "hidden");
            input2.attr("name", "searchmode");
            input2.attr("value", searchMode);
            var input3 = $("<input>");
            input3.attr("type", "hidden");
            input3.attr("name", "where");
            input3.attr("value", whereConditon);
            var input4 = $("<input>");
            input4.attr("type", "hidden");
            input4.attr("name", "pms");
            input4.attr("value", JSON.stringify(sqlParams));
            $("body").append(form);//将表单放置在web中
            form.append(input1);
            form.append(input2);
            form.append(input3);
            form.append(input4);
            form.submit();//表单提交
            HM.closePageLoading();
            pop.close('confirm-win_okexport');
        }

        // 对Date的扩展，将 Date 转化为指定格式的String
        // 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，
        // 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
        Date.prototype.Format = function (fmt) { //author: meizz
            var o = {
                "M+": this.getMonth() + 1, //月份
                "d+": this.getDate(), //日
                "H+": this.getHours(), //小时
                "m+": this.getMinutes(), //分
                "s+": this.getSeconds(), //秒
                "q+": Math.floor((this.getMonth() + 3) / 3), //季度
                "S": this.getMilliseconds() //毫秒
            };
            if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
            for (var k in o)
                if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            return fmt;
        }

        var virStock = function () {
            var content = "<iframe id='superSearchFrame' src='/WVirStock/ViewStock/0/"+ '@ViewData["userid"]' +"' style='border:0;width:100%;height:100%;'></iframe>";
            HM.dealwinWithId(content, 1300, 640, '查看虚拟库房','virStock');
        }
    </script>
}

@section script {
    <script src="~/lib/bootstrap-table/js/bootstrap-table.js"></script>
    <script src="~/lib/bootstrap-table/js/bootstrap-table-zh-CN.js"></script>
    <script src="~/lib/modal-panel/pop.min.js"></script>
    <script src="~/js/modalwindow.js"></script>
}



